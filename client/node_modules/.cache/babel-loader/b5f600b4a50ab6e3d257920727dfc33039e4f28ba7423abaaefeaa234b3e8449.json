{"ast":null,"code":"import request from '../../utils/request';\nimport { toast } from \"react-toastify\";\nimport { categoryAction } from '../slices/categorySlice';\n\n// fetch all category \nexport function fetchCategories() {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await request.get(`api/categories/`);\n      dispatch(categoryAction.setCategories(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n//create category \nexport function createCategory(newCategory) {\n  return async (dispatch, getState) => {\n    try {\n      dispatch(categoryAction.setLoading());\n      await request.post(`api/categories/admin`, newCategory, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.admin.data.token\n        }\n      });\n      dispatch(categoryAction.setIsCategoryCreated()); //put it ro true\n      dispatch(fetchCategories());\n      toast.success(\"category created successfully\");\n      // after 2 seconsd we set it to false to return to the page\n      setTimeout(() => dispatch(categoryAction.clearIsCategoryCreated()), 2000); //2 second\n    } catch (error) {\n      dispatch(categoryAction.clearLoading());\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n//update Category\nexport function updateCategory(newCategory, CategoryId) {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        data\n      } = await request.put(`api/categories/admin/${CategoryId}`, newCategory, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.admin.data.token\n        }\n      });\n      dispatch(categoryAction.setCategory(data));\n      dispatch(fetchCategories());\n      toast.success(\"category updated successfully\");\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n//delete category \nexport function deleteCategory(CategoryId) {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        data\n      } = await request.delete(`api/categories/admin/${CategoryId}`, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.admin.data.token\n        }\n      });\n      dispatch(fetchCategories());\n      dispatch(categoryAction.deleteCategory(data.CategoryId));\n      toast.success(\"category deleted successfully\");\n    } catch (error) {\n      console.log(error);\n      toast.error(error.response.data.message);\n    }\n  };\n}","map":{"version":3,"names":["request","toast","categoryAction","fetchCategories","dispatch","data","get","setCategories","error","response","message","createCategory","newCategory","getState","setLoading","post","headers","Authorization","auth","admin","token","setIsCategoryCreated","success","setTimeout","clearIsCategoryCreated","clearLoading","updateCategory","CategoryId","put","setCategory","deleteCategory","delete","console","log"],"sources":["/home/chaden/Téléchargements/ttour-main/client/src/redux/apiCalls/categoryApiCall.js"],"sourcesContent":["import request  from '../../utils/request'\nimport { toast } from \"react-toastify\"\nimport { categoryAction } from '../slices/categorySlice';\n\n\n// fetch all category \nexport function fetchCategories(){\n    return async(dispatch)=>{\n        try{\n\n        const {data}=await request.get(`api/categories/`);\n        dispatch(categoryAction.setCategories(data))\n        }catch(error){\n           toast.error(error.response.data.message)\n      \n        }\n\n    }\n}\n\n\n\n//create category \nexport function createCategory(newCategory){\n    return async(dispatch , getState)=>{\n        try{\n        dispatch(categoryAction.setLoading())\n        await request.post(`api/categories/admin` , newCategory,{\n            headers:{\n                Authorization: \"Bearer \" + getState().auth.admin.data.token,\n            } \n        });\n        dispatch(categoryAction.setIsCategoryCreated())//put it ro true\n        dispatch(fetchCategories())\n        toast.success(\"category created successfully\")\n        // after 2 seconsd we set it to false to return to the page\n        setTimeout(()=>dispatch(categoryAction.clearIsCategoryCreated()),2000)//2 second\n        }catch(error){\n          \n          dispatch(categoryAction.clearLoading())\n          toast.error(error.response.data.message)\n      \n        }\n\n    }\n}\n\n\n\n\n\n//update Category\nexport function updateCategory(newCategory,CategoryId){\n    return async(dispatch , getState)=>{\n        try{\n      \n  const {data}=  await request.put(`api/categories/admin/${CategoryId}` , newCategory,{\n            headers:{\n                Authorization: \"Bearer \" + getState().auth.admin.data.token,\n              \n            } \n        });\n        dispatch(categoryAction.setCategory(data))\n        dispatch(fetchCategories())\n        toast.success(\"category updated successfully\")\n        }catch(error){\n            \n         toast.error(error.response.data.message)\n        \n        }\n\n    }\n}\n\n\n//delete category \nexport function deleteCategory(CategoryId){\n    return async(dispatch , getState)=>{\n        try{\n      \n  const {data}=  await request.delete(`api/categories/admin/${CategoryId}`,{\n            headers:{\n                Authorization: \"Bearer \" + getState().auth.admin.data.token,\n              \n            } \n        });\n        dispatch(fetchCategories())\n        dispatch(categoryAction.deleteCategory(data.CategoryId));\n        toast.success(\"category deleted successfully\")\n        }catch(error){\n            console.log(error)\n         toast.error(error.response.data.message)\n        \n        }\n\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}